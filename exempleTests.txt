package fr.APGabrielPaul.BibliSIO.ExemplaireTest;

import fr.APGabrielPaul.BibliSIO.Article.Article;
import fr.APGabrielPaul.BibliSIO.Article.ArticleJPAService;
import fr.APGabrielPaul.BibliSIO.Article.ArticleRepository;
import fr.APGabrielPaul.BibliSIO.Article.ArticleService;
import fr.APGabrielPaul.BibliSIO.Exemplaire.Exemplaire;
import fr.APGabrielPaul.BibliSIO.Exemplaire.ExemplaireJPAService;
import fr.APGabrielPaul.BibliSIO.Exemplaire.ExemplaireRepository;
import fr.APGabrielPaul.BibliSIO.Exemplaire.ExemplaireService;
import fr.APGabrielPaul.BibliSIO.exceptions.ResourceAlreadyExistsException;
import fr.APGabrielPaul.BibliSIO.exceptions.ResourceNotFoundException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.Example;
import org.springframework.test.context.ContextConfiguration;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.Assert.assertThrows;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
@ContextConfiguration(classes = ExemplaireJPAService.class)
@SpringBootTest
public class ExemplaireServiceTest {

    @Autowired
    private ExemplaireService exemplaireService;

    private List<Exemplaire> exemplaireList;


    @MockBean
    private ExemplaireRepository exemplaireRepository;

    @BeforeEach
    void setUp() {
        exemplaireList = new ArrayList<>() {{
            add(new Exemplaire(1L , "Titre1", "novembre 2015", true));
            add(new Exemplaire(2L , "Titre1", "novembre 2016", true));
            add(new Exemplaire(3L , "Titre1", "novembre 2010", true));

        }};

        Exemplaire exemplaire = exemplaireList.get(0);
        when(exemplaireRepository.findById(1L)).thenReturn(Optional.of(exemplaire));

    }

    @Test
    void testGetAll_renvoie3(){
        when(exemplaireRepository.findAll()).thenReturn(exemplaireList);
        assertEquals(3 , exemplaireService.getAll().size());
    }

    @Test
    void testGetById(){
        when(exemplaireRepository.findById(1L)).thenReturn(Optional.of(exemplaireList.get(0)));
        when(exemplaireRepository.findById(12L)).thenReturn(Optional.empty());
        assertAll(
                ()-> assertEquals(exemplaireList.get(0), exemplaireService.getById(1L)),
                ()-> assertThrows(ResourceNotFoundException.class, ()-> exemplaireService.getById(12L))
        );


    }

    @Test
    void testCreation(){
        Exemplaire exemplaire = new Exemplaire(5L , "Titre1", "novembre 2010", true);
        Exemplaire exemplaire1 = new Exemplaire(3L , "Titre1", "novembre 2010", true);
        when(exemplaireRepository.save(any(Exemplaire.class))).thenReturn(exemplaire);
        when(exemplaireRepository.exists(Example.of(exemplaire1))).thenReturn(true);
        assertAll(
                ()-> assertEquals(exemplaire, exemplaireService.create(exemplaire)),
                ()-> assertThrows(ResourceAlreadyExistsException.class, ()-> exemplaireService.create(exemplaire1))
        );
    }

    @Test
    void testUpdate(){
        Exemplaire exemplaire = exemplaireList.get(0);
        exemplaire.setTitre("nouveauTitre");

        when(exemplaireRepository.existsById(exemplaire.getId())).thenReturn(true);
        when(exemplaireRepository.save(any(Exemplaire.class))).thenReturn(exemplaire);

        assertEquals(exemplaire, exemplaireService.update(exemplaire.getId(), exemplaire));
    }



    @Test
    void testUpdateError(){
        Exemplaire exemplaire = new Exemplaire(5L , "Titre1", "novembre 2010", true);
        exemplaire.setId(3L);
        when(exemplaireRepository.exists(Example.of(exemplaire))).thenReturn(false);
        assertThrows(ResourceNotFoundException.class, () -> exemplaireService.update(exemplaire.getId(), exemplaire));
    }

    @Test
    void testDelete(){
        Exemplaire toDelete = exemplaireList.get(0);
        when(exemplaireRepository.existsById(toDelete.getId())).thenReturn(true);
        exemplaireService.delete(toDelete.getId());
        verify(exemplaireRepository).delete(toDelete);
    }

    @Test
    void testDeleteError(){
        Exemplaire toDelete = new Exemplaire(51L , "Titre1", "novembre 2010", true);
        doThrow(ResourceNotFoundException.class).when(exemplaireRepository).delete(any());

        assertThrows(ResourceNotFoundException.class, () -> exemplaireService.delete(toDelete.getId()));
    }


}
